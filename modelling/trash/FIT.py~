import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

T,R = np.loadtxt("sigma.dat",unpack='False')

for i in range(len(T)):
  if R[i] == np.min(R):
    print R[i], T[i], i
    
def func(x,a,b,c):
  return a*x + b*x**2 + c

  
def alfa(r,fdfasfsaf)
  y = ((1.0 - beta*((R*R)/(r*r)))*((r)/(sqrt(r*r-R*R))))/2.0*np.pi
  return y
 
  for R in range(0.01, 50, 0.01)

  if (R < a_s-1.0e-9)
            	
	X_s = (1.0 / sqrt(1.0 - (R/a_s)**2)) * log((1.0+(sqrt(1.0-(R/a_s)**2)))/(R/a_s));
	I_R = (M_s/(2.0*M_PI*a_s*a_s*GAMMA*(1.0-(R/a_s)**2)*(1.0-(R/a_s)**2)))*((2.0+(R/a_s)**2)*X_s-3.0);
	sig_p = ((2.0*G*M_s*M_s*a_s)/(GAMMA*I_R*2.0*M_PI))*re1;
      
    
         if(R >= a_s-1.0e-10 && R <= a_s+1.0e-10)
	        	
	  X_s = 1.0;
	  I_R = 2.0*M_s/(15.0*M_PI*a_s*a_s*GAMMA);
	  sig_p = ((2.0*G*M_s*M_s*a_s)/(GAMMA*I_R*2.0*M_PI))*re1;
	  
       
      if (R > a_s+1.0e-9)
      	       	  
	X_s = (1.0 / sqrt((R/a_s)**2 - 1.0)) * acos(1.0/((R/a_s)**2));
	I_R = (M_s/(2.0*M_PI*a_s*a_s*GAMMA*(1.0-(R/a_s)**2)*(1.0-(R/a_s)**2)))*((2.0+(R/a_s)**2)*X_s-3.0);
	sig_p = ((2.0*G*M_s*M_s*a_s)/(GAMMA*(I_R)*2.0*M_PI))*re1;
   
   def M_sM_s():
   y = M_s**2*a_s*(12*(a_s + r)**4*np.log10((a_s + r)/(r)) - a_s*(25*a_s**3 + 52*a_s**2*r + 42*a_s*r**2 + 12*r**3))/(12* a_s**5*(a_s + r)**4)
   return y
   
   def M_dmM_dm():
   y = M_dm**2*a_dm*(12*(a_dm + r)**4*np.log10((a_dm + r)/(r)) - a_dm*(25*a_dm**3 + 52*a_dm**2*r + 42*a_dm*r**2 + 12*r**3))/(12* a_dm**5*(a_dm + r)**4)
   return y
  
   def M_sM_dm():
    a1 = 2.0*a_s**3*(a_s-a_dm)**4*a_dm*a_dm*(a_s+r)**2*(a_dm+r)
    a2 = 2.0*(a_s-a_dm)**4*(a_s+r)**2*(a_dm+r)*np.log10(r)
    a3 = 2.0*a_dm**2*(6.0*a_s**2-4.0*a_s*a_dm+a_dm*a_dm)*(a_s+r)*(a_s+r)*(a_dm+r)*np.log10(a_s+r)
    a4 = 2.0*a_s**4+4.0*a_s**3*r-2.0*a_dm**2*r*(a_dm+r)+3.0*a_s*a_dm*(-a_dm*a_dm+a_dm*r+2.0*r*r)+a_s*a_s*(7.0*a_dm*a_dm+7.0*a_dm*r+2.0*r*r)
    a5 = 2.0*a_s*a_s*(a_s-4.0*a_dm)*(a_s+r)*(a_s+r)*(a_dm+r)*np.log10(a_dm+r)
    y = M_s*M_dm*((-1.0)/(a1))*(a2-a3+a_s*((a_s-a_dm)*a_dm*a4-a5));
    return y
    
    def M_dmM_s():
    b1 = 2.0*a_dm**3*(a_dm-a_s)**4*a_s*a_s*(a_dm+r)**2*(a_s+r)
    b2 = 2.0*(a_dm-a_s)**4*(a_dm+r)**2*(a_s+r)*np.log10(r)
    b3 = 2.0*a_s**2*(6.0*a_dm**2-4.0*a_dm*a_s+a_s*a_s)*(a_dm+r)*(a_dm+r)*(a_s+r)*np.log10(a_dm+r)
    b4 = 2.0*a_dm**4+4.0*a_dm**3*r-2.0*a_s**2*r*(a_s+r)+3.0*a_dm*a_s*(-a_s*a_s+a_s*r+2.0*r*r)+a_dm*a_dm*(7.0*a_s*a_s+7.0*a_s*r+2.0*r*r)
    b5 = 2.0*a_dm*a_dm*(a_dm-4.0*a_s)*(a_dm+r)*(a_dm+r)*(a_s+r)*np.log10(a_s+r)
    y = M_dm*M_s*((-1.0)/(b1))*(b2-b3+a_dm*((a_dm-a_s)*a_s*b4-b5))
    return y
  
  re1 = integral de  {  alpha*(M_sM_s + M_dmM_dm + M_sM_dm + M_dmM_s)  }
  
  ////// PROGRAMA PARA INTEGRAR ////////////////////////////////////
  
  def H5(x):
    y=120*x-160*(x**3)+32*(x**5)   #H5
    return y
def func(x):    #integrando
    y=H5(x)**2*exp(-x*x)
    return y
def trap(a,b,n):   #a,b,  limites de integracion
    h=(b-a)/(n-1)
    suma=0.5*(func(a)+func(b))    #primero y ultimos
    for i in arange (1,n-1):
        suma=suma+func(a+i*h)    #da la integral
    return suma*h
I=trap(-7.0,7.0,1000)
print(I)
print(2**5*120.0*sqrt(pi))
  
  ///////////////////////////////////////////////////

  def delta(r,M_s,a_s,M_dm,a_dm):
    return G/(I*gamma*np.pi)


  def sigma(r,M_s,a_s,M_dm,a_dm):
  sigma = delta* integral { }
  return sigma
  


popt, pcov = curve_fit(func, T, R)

#print np.min(func(T,popt[0],popt[1],popt[2],popt[3])), popt[0], popt[1], popt[2],popt[3]
print np.min(func(T,popt[0],popt[1],popt[2])), popt[0], popt[1], popt[2],
      
plt.plot(T,R,"o",c = "blue")
for i in range(3):
  plt.plot(T,func(T,popt[0],popt[1],popt[2]), "r-", c = "red")
plt.grid()
plt.show()