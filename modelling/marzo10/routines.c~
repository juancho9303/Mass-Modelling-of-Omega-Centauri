
double integrando(double r, void * params) 
{
  struct param parameters = *(struct param *) params;
  
  double a_s    =  parameters.a_s;
  double a_dm   =  parameters.a_dm;
  double M_s    =  parameters.M_s;
  double M_dm   =  parameters.M_dm;
  double beta   =  parameters.beta;
  double R      =  parameters.R;

  double alpha, b1, b2, b3, b4, b5, c1, c2, c3, c4, c5;
  double M_dmM_s, M_sM_s, M_dmM_dm, M_sM_dm, aux1, aux2;
  
  alpha = (1.0 - (beta*R*R)/(r*r))  * (r/sqrt(r*r-R*R));
  aux1  = a_s+r;
  aux2  = a_dm+r;
  
  // THIS IS A IN OUR NOTATION
  M_sM_s = M_s*M_s*a_s* ( -(25.0*a_s*a_s*a_s + 52.0*a_s*a_s*r + 42.0*a_s*r*r + 12.0*r*r*r)/(12.0*pow(a_s,4)*pow(aux1,4)) +  log(aux1/r)/pow(a_s,5.0));
  
  // THIS IS D IN OUR NOTATION
  M_dmM_dm = M_dm*M_dm*a_dm* ( -(25.0*a_dm*a_dm*a_dm + 52.0*a_dm*a_dm*r + 42.0*a_dm*r*r + 12.0*r*r*r)/(12.0*pow(a_dm,4)*pow(aux2,4)) +  log(aux2/r)/pow(a_dm,5.0));
  
  //THIS IS B IN OUR NOTATION  
  b1 = 2.0*pow(a_s,2.0) * pow((a_s-a_dm),4.0) * a_dm*a_dm*aux1*aux1*aux2;
  b2 = -2.0*pow((a_s-a_dm),4.0) * aux1*aux1*aux2*log(r);
  b3 =  2.0*a_dm*a_dm * (6.0*a_s*a_s - 4.0*a_s*a_dm + a_dm*a_dm) * aux1*aux1*aux2*log(aux1);
  b4 = 2.0*pow(a_s,4.0) + 4.0*pow(a_s,3.0)*r - 2.0*a_dm*a_dm*r*aux2 + 3.0*a_s*a_dm*(-(a_dm*a_dm)+a_dm*r+2.0*r*r) + a_s*a_s*(7.0*a_dm*a_dm + 7.0*a_dm*r + 2.0*r*r);
  b5 = 2.0*a_s*a_s*(a_s-4.0*a_dm)*aux1*aux1*aux2*log(aux2);
  
  M_sM_dm = (M_s*M_dm/b1) * (b2 + b3 + a_s*(-(a_s-a_dm)*a_dm*b4 - b5));
  
  // THIS IS C IN OUR NOTATION
  c1 = 2.0*pow(a_dm,2.0) * pow((a_dm-a_s),4.0) * a_s*a_s*aux2*aux2*aux1;
  c2 = -2.0*pow((a_dm-a_s),4.0) * aux2*aux2*aux1*log(r);
  c3 = 2.0*a_s*a_s * (6.0*a_dm*a_dm - 4.0*a_dm*a_s + a_s*a_s) * aux2*aux2*aux1*log(aux2);
  c4 = 2.0*pow(a_dm,4.0) + 4.0*pow(a_dm,3.0)*r - 2.0*a_s*a_s*r*aux1 + 3.0*a_dm*a_s*(-(a_s*a_s)+a_s*r+2.0*r*r) + a_dm*a_dm*(7.0*a_s*a_s + 7.0*a_s*r + 2.0*r*r);
  c5 = 2.0*a_dm*a_dm*(a_dm-4.0*a_s)*aux2*aux2*aux1*log(aux1);
  
  M_dmM_s = (M_dm*M_s/c1) * (c2 + c3 + a_dm*(-(a_dm-a_s)*a_s*c4 - c5));
  
  double integrando = alpha*(M_sM_s + M_dmM_dm + M_sM_dm + M_dmM_s);
  
  return integrando;
}
