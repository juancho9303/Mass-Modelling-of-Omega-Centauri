#include <stdio.h>
#include <math.h>
#include <gsl/gsl_integration.h>

// SE UTILIZA UN MODELO DE HERNQUIST MODIFICADO PARA ENCONTRAR LA FORMA DE LA DISPERSION DE VELOCIDADES PROYECTADA Y PODER AJUSTAR LOS PARAMETROS QUE MEJOR SE AJUSTEN A LAS OBSERVACIONES

#define K 10.0
#define N 5
#define M 10e-3
#define GAMMA 1.2
#define G 43007.1
#define EPSILON 1e-3

struct param{
  double beta, a_s, a_dm, M_s, M_dm;  
};

double R;
int i,j,k,l;

// ACA SE DEFINE LA INTEGRAL QUE CONTIENE TODOS LOS TERMINOS DE LAS CONTRIBUCIONES DE MASA ESTELAR Y MATERIA OSCURA 

double integrando(double r, void * params) 
{
  struct param parameters = *(struct param *) params;
  
  double a_s = parameters.a_s;
  double a_dm = parameters.a_dm;
  double M_s = parameters.M_s;
  double M_dm = parameters.M_dm;
  double beta = parameters.beta;
  double alpha, a1, a2, a3, a4, a5, b1, b2, b3, b4, b5;
  double M_sM_dm, M_dmM_s, M_sM_s, M_dmM_dm;
  
  alpha = ((1.0 - beta*((R*R)/(r*r)))*((r)/(sqrt(r*r-R*R))));
  
  M_sM_s = M_s*M_s*a_s*(((12.0*pow((a_s+r),4.0)*log((a_s+r)/(r))) - a_s*(25.0*a_s*a_s*a_s+52.0*a_s*a_s*r+42.0*a_s*r*r+12.0*r*r*r))/(12.0*pow(a_s,5)*pow((a_s+r),4)));
  
  M_dmM_dm = M_dm*M_dm*a_dm*(((12.0*pow((a_dm+r),4.0)*log((a_dm+r)/(r))) - a_dm*(25.0*a_dm*a_dm*a_dm+52.0*a_dm*a_dm*r+42.0*a_dm*r*r+12.0*r*r*r))/(12.0*pow(a_dm,5)*pow((a_dm+r),4)));
  
  //----------------------------------------------------------------
  // Paso a paso sin hacer reducciones para los terminos cruzados.
  //--------------------------------------------------------------
  
  a1 = 2.0*pow(a_s,3.0)*pow((a_s-a_dm),4.0)*a_dm*a_dm*(a_s+r)*(a_s+r)*(a_dm+r);
  a2 = 2.0*pow((a_s-a_dm),4.0)*(a_s+r)*(a_s+r)*(a_dm+r)*log(r);
  a3 = 2.0*a_dm*a_dm*(6.0*a_s*a_s-4.0*a_s*a_dm+a_dm*a_dm)*(a_s+r)*(a_s+r)*(a_dm+r)*log(a_s+r);
  a4 = 2.0*pow(a_s,4.0)+4.0*pow(a_s,3.0)*r-2.0*a_dm*a_dm*r*(a_dm+r)+3.0*a_s*a_dm*(-a_dm*a_dm+a_dm*r+2.0*r*r)+a_s*a_s*(7.0*a_dm*a_dm+7.0*a_dm*r+2.0*r*r);
  a5 = 2.0*a_s*a_s*(a_s-4.0*a_dm)*(a_s+r)*(a_s+r)*(a_dm+r)*log(a_dm+r);
  
  M_sM_dm = M_s*M_dm*((-1.0)/(a1))*(a2-a3+a_s*((a_s-a_dm)*a_dm*a4-a5));
  //printf ("M_sM_dm  = %6lf\t % .18f\n", r, M_sM_dm);
  
  b1 = 2.0*pow(a_dm,3)*pow((a_dm-a_s),4.0)*a_s*a_s*(a_dm+r)*(a_dm+r)*(a_s+r);
  b2 = 2.0*pow((a_dm-a_s),4.0)*(a_dm+r)*(a_dm+r)*(a_s+r)*log(r);
  b3 = 2.0*a_s*a_s*(6.0*a_dm*a_dm-4.0*a_dm*a_s+a_s*a_s)*(a_dm+r)*(a_dm+r)*(a_s+r)*log(a_dm+r);
  b4 = 2.0*pow(a_dm,4.0)+4.0*pow(a_dm,3.0)*r-2.0*a_s*a_s*r*(a_s+r)+3.0*a_dm*a_s*(-a_s*a_s+a_s*r+2.0*r*r)+a_dm*a_dm*(7.0*a_s*a_s+7.0*a_s*r+2.0*r*r);
  b5 = 2.0*a_dm*a_dm*(a_dm-4.0*a_s)*(a_dm+r)*(a_dm+r)*(a_s+r)*log(a_s+r);
  
  M_dmM_s = M_dm*M_s*((-1.0)/(b1))*(b2-b3+a_dm*((a_dm-a_s)*a_s*b4-b5));
  
  //printf ("M_dmM_s  = %6lf\t % .18f\n", r, M_dmM_s);
  
  double integrando = alpha*(M_sM_s + M_dmM_dm + M_sM_dm + M_dmM_s);
  
  return integrando;
}

int main(){
  
  //printf("maricada 1");
  FILE *mod,*script;
  int warn;
  int Nint = 1000; // Numero de intervalos
  double X_s, I_R, s, R, sig_p, rho, re1, re2, result1, error1, result2, error2, a_dm, a_s, M_s, M_dm, beta;
  struct param params; // structura de parametros
  gsl_integration_workspace *z = gsl_integration_workspace_alloc(Nint);
  gsl_function F1;
  
  // PARAMETROS
  
  a_dm = 0.9;
  a_s = 1.0;
  M_s = 2.0;
  M_dm = 2.0;
  beta = 2.0;
  
  mod=fopen("model.dat","w"); 
  
  for(a_dm = 1.1; a_dm < 1.5;  a_dm = a_dm + 0.1)
    {
      for(a_s = 1.2; a_s < 1.5;  a_s = a_s+0.1)
	{
	  for(M_dm = 1.1; M_dm < 1.3;  M_dm = M_dm+0.1)
	    {
	      for(M_s = 1.1; M_s < 1.3;  M_s = M_s+0.1)
		{
		  
		  params.beta  =  beta;
		  params.a_s   =  a_s;
		  params.a_dm  =  a_dm;
		  params.M_s   =  M_s;
		  params.M_dm  =  M_dm;
		  
		  //mod=fopen("model.dat","w");            
		  
		  for(R = 0.01; R < K; R=R+0.01)          
		    {                                     
		      
		      F1.function = &integrando;
		      F1.params = &params;
		      
		      gsl_integration_qags(&F1, R, 40, 0, 1e-3, Nint, z, &result1, &error1); 
		      //printf ("result  = % .18f\n", result1);
		      
		      re1 = result1;
		      s = R/a_s;
		      
		      if (s < 1.0-1.0e-9)
			{      	
			  X_s = (1.0 / sqrt(1.0 - s*s)) * log((1.0+(sqrt(1.0-s*s)))/(s));
			  //printf("sig_p^2(R) %6lf\n", sig_p);	
			}
		      
		      if(s >= 1.0-1.0e-10 && s <= 1.0+1.0e-10)
			{
			  X_s = 1.0;
			}
		      
	  if (s > 1.0+1.0e-9)
	    {	       	  
	      X_s = (1.0 / sqrt(s*s - 1.0)) * acos(1.0/s);
	      //printf("sig_p^2(R) %6lf\n", sig_p);
	    }      
	  
	  I_R = (M_s/(2.0*M_PI*a_s*a_s*GAMMA*(1.0-s*s)*(1.0-s*s)))*((2.0+s*s)*X_s-3.0);
	  sig_p = ((2.0*G*M_s*M_s*a_s)/(GAMMA*(I_R)*2.0*M_PI))*re1;
	  //printf("%16.8e\t %16.8e\n", R, I_R);
	  fprintf(mod,"%16.8e\t %16.8e\n", R, sig_p);
		    }
		  fprintf(mod,"\n");
		  
		  //gsl_integration_workspace_free(z);
		  
		  //fclose(mod);
		  
		  //return(warn);
		}
	      
	      
  	    }
	}      
    }   
    fclose(mod);
    gsl_integration_workspace_free(z);
	      //fclose(mod);
    return(warn);
  
  //fprintf(mod,"\n");
}
